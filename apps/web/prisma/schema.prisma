// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AttributeType {
  TEXT
  NUMBER
  DATE
  CHECKBOX
  SELECT
  MULTISELECT
  URL
  EMAIL
  PHONE
  TAGS // comma separated list of strings
  FILE // could be an image, pdf, etc
  SOCIAL
}

model User {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique
  firstName     String?
  lastName      String?
  avatar        String?
  organizations Organization[]
}

model Organization {
  id        Int                 @id @default(autoincrement())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  deletedAt DateTime?
  slug      String              @unique
  name      String
  logo      String?
  users     User[]
  contacts  Contact[]
  lists     List[]
  config    OrganizationConfig?
}

model OrganizationConfig {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  attributes     AttributeConfig[]
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId Int               @unique
}

model AttributeConfig {
  id             Int                @id @default(autoincrement())
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  system         Boolean            @default(false) // system attributes are not editable by the user
  required       Boolean            @default(false)
  type           AttributeType      @default(TEXT)
  label          String
  icon           String?
  description    String?
  organization   OrganizationConfig @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Contact {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  attributes     Json // { "[attributeId]": "[attributeValue]" }
  lists          List[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  externalId     String       @unique // so we don't expose the internal db id
  Company        Company?     @relation(fields: [companyId], references: [id])
  companyId      Int?
}

model List {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  name           String
  slug           String
  description    String?
  icon           String?
  contacts       Contact[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Company {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  name        String
  slug        String
  description String?
  icon        String?
  employees   Contact[]
}
